(function(){

	// Requirements
	var
		sys = require("sys"),
    fs = require("fs"),
    path = require("path"),
		less = require("less"),
		//pulverizr = require("pulverizr"),
		uglify = require("uglify-js"),
    	jsp = uglify.parser,
    	pro = uglify.uglify,
    util = require('util'),
    exec = require('child_process').exec,
		deps = require(__dirname+'/dep.js'),
		util = require(__dirname+'/util.js');

	// Buildr Constructor
	var Buildr = function(){
		this.config = {}.extend(this.config);
		this.init.apply(this,arguments);
	};

	// Buildr Definition
	Buildr.prototype.extend({
		/**
		 * Configuration
		 */
		"config": {
			// User Configurable
			"compress": {
				"js": true,
				"css": true,
				"img": true,
				"html": true
			},
			"bundle": {
				"js": true,
				"css": true,
				"src": false
			},
			"directories": {
				"out": "./out",
				"src": "./src",
				"templates": "./templates",
				"subpackages": "subpackages"
			},
			"templates": {
				"out-bundle-header.js": "out-bundle-header.js",
				"out-bundle-footer.js": "out-bundle-footer.js",
				"out-bundle-item.js": "out-bundle-item.js",
				"out-bundle-subpackage.js": "out-bundle-subpackage.js",
				"src-bundle-header.js": "src-bundle-header.js",
				"src-bundle-footer.js": "src-bundle-footer.js",
				"src-bundle-item.js": "src-bundle-item.js",
				"src-bundle-subpackage.js": "src-bundle-subpackage.js",

				"out-bundle-header.css": "out-bundle-header.css",
				"out-bundle-footer.css": "out-bundle-footer.css",
				"out-bundle-item.css": "out-bundle-item.css",
				"out-bundle-subpackage.css": "out-bundle-subpackage.css",
				"src-bundle-header.css": "src-bundle-header.css",
				"src-bundle-footer.css": "src-bundle-footer.css",
				"src-bundle-item.css": "src-bundle-item.css",
				"src-bundle-subpackage.css": "src-bundle-subpackage.css"
			},
			"subpackages": true,
			"files": {
				"js": true,
				"css": true,
				"img": true
			},

			// Autogenerated
			"src": {
				"js": [],
				"css": [],
				"img": []
			},
			"out": {
				"js": [],
				"css": [],
				"img": []
			},
			"templateContent": {
				"out-bundle-item.js": "%DATA%",
				"out-bundle-item.css": "%DATA%",
				"src-bundle-item.js": "",
				"src-bundle-item.css": "@import url(%URL%);\n",
			}
		},

		/**
		 * Initialise the Builder
		 * @param {String|Object} options
		 */
		init: function(options){
			// Configure
			if ( typeof options === 'string' ) {
				options = this.loadOptions(options);
			}
			this.applyOptions(options);
		},

		/**
		 * Load the Options
		 * @param {String} rootPath
		 * @return {Object} options
		 */
		loadOptions: function(rootPath){
			// Prepare
			var options = {};

			// Path
			options.rootPath = fs.realpathSync(rootPath.strip('package.json'));
			options.metaPath = options.rootPath+'/package.json';

			// Check if the meta data exists
			var exists = util.fileExistsSync(options.metaPath);
			if ( exists ) {
				// There is already meta data
				options.extend(JSON.parse(fs.readFileSync(options.metaPath).toString()).buildr||{});
			}

			// Return
			return options;
		},

		/**
		 * Apply the Options
		 * @param {Object} options
		 */
		applyOptions: function(options){
			// Prepare
			var config = this.config;

			// Check
			if ( typeof options !== 'object' ) {
				abort('Options was not of a valid type');
			}

			// Apply Options to Configuration
			config.extend(options);

			// ----------------------------------------------------------------------
			// Handle Shortcuts

			// Compress
			if ( config.compress === true || config.compress === false ) {
				config.compress = {
					"js": config.compress,
					"css": config.compress,
					"img": config.compress,
					"html": config.compress
				};
			}

			// Bundle
			if ( config.bundle === true || config.bundle === false ) {
				config.bundle = {
					"js": config.bundle,
					"css": config.bundle
				};
			}

			// Name
			config.name = config.name || path.basename(config.rootPath);

			// ----------------------------------------------------------------------
			// Expand Directory Paths

			// Bundle Javascript
			if ( config.bundle.js === true ) {
				config.bundle.js = config.name+'.js';
			}

			// Bundle CSS
			if ( config.bundle.css === true ) {
				config.bundle.css = config.name+'.css';
			}

			// Define
			var expandPath = function(key,value,relativePath){
				// Full Path
				if ( value.beginsWith('/') ) {
					// do nothing
				}
				// Relative to Root Directory
				else if ( value.beginsWith('./') ) {
					value = value.replace(/^\.\//, config.rootPath+'/');
				}
				// Relative to Relative Path
				else {
					value = relativePath+'/'+value;
				}

				// Apply new value
				return value;
			}

			// Directories
			config.directories.each(function(key,value){
				config.directories[key] = expandPath(key,value,config.directories.src);
			});

			// Templates
			config.templates.each(function(key,value){
				config.templates[key] = expandPath(key,value,config.directories.templates);
			});

			// Subpackages
			config.subpackages.each(function(key,value){
				config.subpackages[key] = expandPath(key,value,config.directories.subpackages);
			});

			// ----------------------------------------------------------------------
			// Detect Files

			// JS
			if ( config.files.js === true ) {
				// Scan the directory for javascript files
				config.files.js = util.findFilesWithExtensionSync(config.directories.src, ".js");
			}

			// CSS
			if ( config.files.css === true ) {
				// Scan the directory for css files
				config.files.css = util.findFilesWithExtensionSync(config.directories.src, ".css");
			}

			// IMG
			if ( config.files.img === true ) {
				// Scan the directory for image files
				config.files.img = util.findFilesWithExtensionSync(config.directories.src, (/\.(jpe?g|png|w?bmp|[gt]iff?)$/i));
			}


			// ----------------------------------------------------------------------
			// Expand File Paths

			// JS
			config.files.js.each(function(key,value){
				config.src.js[key] = expandPath(key,value,config.directories.src);
				config.out.js[key] = expandPath(key,value,config.directories.out);
			});

			// CSS
			config.files.css.each(function(key,value){
				config.src.css[key] = expandPath(key,value,config.directories.src);
				config.out.css[key] = expandPath(key,value,config.directories.out);
			});

			// IMG
			config.files.img.each(function(key,value){
				config.src.img[key] = expandPath(key,value,config.directories.src);
				config.out.img[key] = expandPath(key,value,config.directories.out);
			});


			// ----------------------------------------------------------------------
			// Merge in Subpackages

			// Cycle
			config.subpackages.each(function(key,value){
				// Prepare
				var subBuilder = new Buildr(value);

				// Attach Source Files
				config.src.js.extend(subBuilder.config.src.js);
				config.src.css.extend(subBuilder.config.src.css);
				config.src.img.extend(subBuilder.config.src.img);

				// Attach Out Files
				config.out.js.extend(subBuilder.config.out.js);
				config.out.css.extend(subBuilder.config.out.css);
				config.out.img.extend(subBuilder.config.out.img);
			});


			// ----------------------------------------------------------------------
			// Fetch Template Content

			// Templates
			config.templates.each(function(key,value){
				var templateData = (value && util.fileExistsSync(value)) ? fs.readFileSync(value).toString() : '';
				config.templateContent[key] = templateData || config.templateContent[key] || '';
			});


		},

		/**
		 * Compile our Project
		 */
		compile: function(){
			// Prepare
			var config = this.config;

			// Clean
			if ( config.directories.out ) {
				console.log("Cleaning...");
				util.rmdirSync(config.directories.out);
				fs.mkdirSync(config.directories.out,0700);
				util.cpdirSync(config.directories.src,config.directories.out);
			}

			// Bundle
			this.bundle();

			// Compress
			this.compress();
		},

		/**
		 * Bundle all JS Files
		 */
		bundleJs: function(){
			// Prepare
			var
				config = this.config,
				bundleSrcData = '', bundleSrcPath = config.directories.src+'/'+config.bundle.js,
				bundleOutData = '', bundleOutPath = config.directories.out+'/'+config.bundle.js;

			// Amend
			bundleSrcData += config.templateContent['src-bundle-header.js'];
			bundleOutData += config.templateContent['out-bundle-header.js'];

			// Subpackages
			config.subpackages.each(function(i,subpackage){
				console.log("Bundled: "+subpackage);

				// Amend Src Text
				bundleSrcData += config.templateContent['src-bundle-subpackage.js']
					.replace('%NAME%',path.basename(subpackage));
				bundleOutData += config.templateContent['out-bundle-subpackage.js']
					.replace('%NAME%',path.basename(subpackage));
			});

			// Bundle
			config.out.js.each(function(i,fileOutPath){
				console.log("Bundled: "+fileOutPath);

				// Prepare
				var
					filePath = util.getRelativePath(fileOutPath,[config.directories.src,config.directories.out]),
					fileData = fs.readFileSync(fileOutPath).toString();

				// Amend Files
				bundleOutData += config.templateContent['out-bundle-item.js']
					.replace('%DATA%',fileData)
					.replace('%URL%',filePath);
				bundleSrcData += config.templateContent['src-bundle-item.js']
					.replace('%DATA%',fileData)
					.replace('%URL%',filePath);

				// Delete the Out File
				fs.unlinkSync(fileOutPath);
			});

			// Amend
			bundleSrcData += config.templateContent['src-bundle-footer.js'];
			bundleOutData += config.templateContent['out-bundle-footer.js'];

			// Write Files
			console.log("\nBundling JS Files to: "+bundleOutPath);
			fs.writeFileSync(bundleOutPath,bundleOutData);
			if ( config.bundle.src ) {
				console.log("Bundling JS Files to: "+bundleSrcPath);
				fs.writeFileSync(bundleSrcPath,bundleSrcData);
			}

			// Add Files
			config.out.js = [];
			config.out.js.push(bundleOutPath);
			config.src.js.push(bundleSrcPath);
		},

		/**
		 * Bundle all Css Files
		 */
		bundleCss: function(){
			// Prepare
			var
				config = this.config,
				bundleSrcData = '', bundleSrcPath = config.directories.src+'/'+config.bundle.css,
				bundleOutData = '', bundleOutPath = config.directories.out+'/'+config.bundle.css;

			// Amend
			bundleSrcData += config.templateContent['src-bundle-header.css'];
			bundleOutData += config.templateContent['out-bundle-header.css'];

			// Subpackages
			config.subpackages.each(function(i,subpackage){
				console.log("Bundled: "+subpackage);

				// Amend Src Text
				bundleSrcData += config.templateContent['src-bundle-subpackage.css']
					.replace('%NAME%',path.basename(subpackage));
				bundleOutData += config.templateContent['out-bundle-subpackage.css']
					.replace('%NAME%',path.basename(subpackage));
			});

			// Bundle
			config.out.css.each(function(i,fileOutPath){
				console.log("Bundled: "+fileOutPath);

				// Prepare
				var
					filePath = util.getRelativePath(fileOutPath,[config.directories.src,config.directories.out]),
					fileData = fs.readFileSync(fileOutPath).toString(),
					parentOutPath = fileOutPath.replace(/[\/\\][^\/\\]+$/,'');

				// Amend Out Text
				fileData += fileData
					.replace(
						/url\(([^\)]+)\)/g,
						function(str, p1, offset){
							// Trim quotes
							var url = p1.replace(/[\'\"]/g,'');

							// Update url
							if ( url[0] !== '/' && !/\:/.test(url) ) {
								url = fs.realpathSync(parentOutPath+'/'+url).replace(config.directories.out+'/','');
							}

							// Replace with new url
							return 'url(\''+url+'\')';
						}
					);

				// Amend Files
				bundleOutData += config.templateContent['out-bundle-item.css']
					.replace('%DATA%',fileData)
					.replace('%URL%',filePath);
				bundleSrcData += config.templateContent['src-bundle-item.css']
					.replace('%DATA%',fileData)
					.replace('%URL%',filePath);

				// Delete the Out File
				fs.unlinkSync(fileOutPath);
			});

			// Amend
			bundleSrcData += config.templateContent['src-bundle-footer.css'];
			bundleOutData += config.templateContent['out-bundle-footer.css'];

			// Write Files
			console.log("\nBundling CSS Files to: "+bundleOutPath);
			fs.writeFileSync(bundleOutPath,bundleOutData);
			if ( config.bundle.src ) {
				console.log("Bundling CSS Files to: "+bundleSrcPath);
				fs.writeFileSync(bundleSrcPath,bundleSrcData);
			}

			// Add Files
			config.out.css = [];
			config.out.css.push(bundleOutPath);
			config.src.css.push(bundleSrcPath);
		},

		/**
		 * Bundle the Files
		 */
		bundle: function() {
			// Prepare
			var config = this.config;

			// JS
			if ( config.bundle.js ) {
				console.log("\nBundling JS Files:");
				this.bundleJs();
			}

			// CSS
			if ( config.bundle.css ) {
				console.log("\nBundling CSS Files:");
				this.bundleCss();
			}
		},

		/**
		 * Compress JS Files
		 */
		compressJs: function(){
			// Prepare
			var config = this.config;

			// Compress
			config.out.js.each(function(key,filePath){
				console.log("Compressed: "+filePath);
				var orig_code = fs.readFileSync(filePath).toString();
				var ast = jsp.parse(orig_code); // parse code and get the initial AST
				ast = pro.ast_mangle(ast); // get a new AST with mangled names
				ast = pro.ast_squeeze(ast); // get an AST with compression optimizations
				var final_code = pro.gen_code(ast); // compressed code here
				fs.writeFileSync(filePath,final_code);
			});
		},

		/**
		 * Compress IMG Files
		 */
		compressImg: function(){
			// Prepare
			var config = this.config;

			// Compress
			config.out.js.each(function(key,filePath){
				console.log("Compressed: "+filePath);
				pulverizr.compress(filePath);
			});
		},

		/**
		 * Compress CSS Files
		 */
		compressCss: function(){
			// Prepare
			var config = this.config;

			// Compress
			config.out.css.each(function(key,filePath){
				console.log("Compressed: "+filePath);

				// Prepare
				var
					data = fs.readFileSync(filePath).toString(),
					options = {
						paths: [config.directories.out],
						optimization: 1,
						filename: filePath
					};

				// Minify
				new(less.Parser)(options).parse(data,
					function(err,tree){
						// Check
						if ( err ) {
							less.writeError(err, options);
							process.exit(1);
						} else {
							// Save
							try {
								css = tree.toCSS({
									compress: 1
								});
								fs.writeFileSync(filePath,css);
							} catch (e) {
								less.writeError(e, options);
								process.exit(2);
							}
						}
					}
				);
			});
		},

		/**
		 * Compress
		 */
		compress: function() {
			// Prepare
			var config = this.config;

			// JS
			if ( config.compress.js ) {
				console.log("\nCompressing JS Files:");
				this.compressJs();
			}

			// CSS
			if ( config.compress.css ) {
				console.log("\nCompressing CSS Files:");
				this.compressCss();
			}

			// IMG
			if ( config.compress.img ) {
				console.log("\nCompressing Image Files:");
				//this.compressImg();
			}
		},

		/**
		 * Run the Application
		 */
		run: function() {
			// Compile
			this.compile();

			// Done
			return true;
		}

	});

	// Export
	module.exports.Buildr = Buildr;
})();
