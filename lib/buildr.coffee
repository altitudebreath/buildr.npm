# Requirements
sys = require 'sys'
fs = require 'fs'
path = require 'path'
jshint = false
less = false
pulverizr = false
uglify = false
jsp = false
pro = false
util = require 'bal-util'
exec = require('child_process').exec
deps = require __dirname+'/dep.js'

# Declare
class Buildr

	# Configuration
	config:

		# User Configurable
		compress:
			js: true
			css: true
			img: false
			html: true
		check:
			js: false
			css: false
			jsOptions:
				browser: true
		bundle:
			js: true
			css: true
			src: false
		directories:
			out: './out'
			src: './src'
			templates: './templates'
			subpackages: 'subpackages'
		templates:
			'out_bundle_header.js': 'out_bundle_header.js'
			'out_bundle_footer.js': 'out_bundle_footer.js'
			'out_bundle_item.js': 'out_bundle_item.js'
			'out_bundle_subpackage.js': 'out_bundle_subpackage.js'
			'src_bundle_header.js': 'src_bundle_header.js'
			'src_bundle_footer.js': 'src_bundle_footer.js'
			'src_bundle_item.js': 'src_bundle_item.js'
			'src_bundle_subpackage.js': 'src_bundle_subpackage.js'

			'out_bundle_header.css': 'out_bundle_header.css'
			'out_bundle_footer.css': 'out_bundle_footer.css'
			'out_bundle_item.css': 'out_bundle_item.css'
			'out_bundle_subpackage.css': 'out_bundle_subpackage.css'
			'src_bundle_header.css': 'src_bundle_header.css'
			'src_bundle_footer.css': 'src_bundle_footer.css'
			'src_bundle_item.css': 'src_bundle_item.css'
			'src_bundle_subpackage.css': 'src_bundle_subpackage.css'
		subpackages: true
		ignore:
			js: []
			css: []
			img: []
			check: []
		files:
			js: true
			css: true
			img: true
		
		# Autogenerated
		templateContent:
			'out_bundle_item.js': '%DATA%'
			'out_bundle_item.css': '%DATA%'
			'src_bundle_item.js': ''
			'src_bundle_item.css': '@import url(%URL%);\n'
		
	
	# Intialise
	constructor: (options) ->
		# Options
		if typeof options is 'string'
			options = @loadOptions options
		@applyOptions options
	
	# Load the options
	loadOptions: (rootPath) ->
		options = {}

		# Path
		options.rootPath = fs.realpathSync rootPath.strip 'package.json'
		options.metaPath = options.rootPath + '/package.json'

		# Check if the meta data exists
		if util.fileExistsSync options.metaPath
			# There is already meta data
			options.extend(JSON.parse(fs.readFileSync(options.metaPath).toString()).buildr||{})
		
		# Return
		return options
	
	# Apply the options
	applyOptions: (options) ->
		# Prepare
		config = @config

		# Check
		if typeof options isnt 'object'
			throw new Error 'Options was not a valid type'
		
		# Apply optiosn to configuration
		config.extend options

		##
		# Handle shortcuts

		# Compress
		if config.compress in [true,false]
			config.compress =
				js: config.compress
				css: config.compress
				img: config.compress
				html: config.compress

		# Bundle
		if config.bundle in [true,false]
			config.bundle =
				js: config.bundle
				css: config.bundle

		# Name
		config.name or= path.basename config.rootPath

		# Bundle JS
		if config.bundle.js is true
			config.bundle.js = config.name+'.js'
		
		# Bundle CSS
		if config.bundle.css is true
			config.bundle.css = config.name+'.css'
		

		##
		# Expand directory paths
		
		# Cycle through
		for [type,dir] in [
			['directories','src'],
			['templates','templates'],
			['subpackages','subpackages']
		]
			config[type].forEach (value,key) =>
				config[type][key] = @expandPath value, config.rootPath, config.directories[dir]

		##
		# Detect Files

		# Cycle through
		for [type,extension] in [
			['js','.js'],
			['css','.css'],
			['img',/\.(jpe?g|png|w?bmp|[gt]iff?)$/i]
		]
			if config.files[type] is true
				config.files[type] = util.findFilesWithExtensionSync config.directories.src, extension

		##
		# Merge in subpackages

		# Cycle
		config.subpackages.forEach (subpackagePath) ->
			# Init subpackage
			subBuildr = new Buildr(subpackagePath)

			# Cycle through
			for type in ['js','css','img']
				filePath = subBuildr.config.files[type]
				fileFullPath = me.expandPath(
					filePath,
					subBuildr.config.rootPath,
					subBuildr.config.directories.src
				)
				config.files[type].push fileFullPath
		
		##
		# Shrink file paths

		# Cycle through
		for type in ['js','css','img']
			config.files[type].forEach (filePath,key) =>
				fileShortPath = @shrinkPath filePath
				if @isIgnored config.ignore[type], fileShortPath
					fileShortPath = false
				config.files[type][key] = fileShortPath
		
		##
		# Fetch template content

		# Cycle through
		config.templates.forEach (value,key) ->
			templateData = (value and util.fileExistsSync(value)) ? fs.readFileSync(value).toString() : ''
			config.templateContent[key] = templateData or config.templateContent[key] || ''
		
	
	# Compile our project
	compile: ->
		# Prepare
		config = @config
		outDir = config.directories.out
		srcDir = config.directories.src

		# Check
		@check()

		# Clean
		if config.directories.out
			console.log 'Cleaning...'
			if util.fileExistsSync outDir
				util.rmdirSync outDir
			fs.mkdirSync outDir, 0700
			util.cpdirSync srcDir, outDir
		
		# Bundle
		@bundle()

		# Compress
		@compress()

		# Compare
		srcStats = util.dirstatsSync srcDir
		outStats = util.dirstatsSync outDir
		percent = Math.round(outStats.size/srcStats.size)*100

		# Output
		console.log "\n"+
			"Reduced source from\n"+
			"\t["+srcStats.files+"] files and ["+srcStats.size+"] bytes to\n"+
			"\t["+outStats.files+"] files and ["+outStats.size+"] bytes\n"+
			"\t["+percent+"%] of original size"
		
		# Log
		console.log "\nCompilation complete"
	
	
	# Check JS files
	checkJs: ->
		# Prepare
		config = @config
		foundAll = false

		# Load
		jshint or= require('jshint').JSHINT

		# Check
		config.files.js.forEach (filePath) =>
			# Log
			console.log "\nChecking JS Files:"
			
			# Ignore?
			if !filePath or @isIgnored(config.ignore.check, filePath)
				return
			
			# Prepare
			fileSrcPath = @expandPath filePath, config.rootPath, config.directories.src
			fileData = fs.readFileSync(fileSrcPath).toString()
			foundError = false
			result = false
			
			# Output
			jshint(fileData,config.check.jsOptions)
			result = jshint.data()

			# Result
			if !result.errors or !result.errors.length then return
			
			# Log
			console.log filePath

			# Output
			result.errors.forEach (error) ->
				if !error or !error.raw then return
				foundError = true
				console.log(
					'\tLine '+error.line+':'+
					' '+error.raw.replace(/\{([a-z])\}/,function(a,b){
						return error[b]||a;
					})+
					(error.evidence ? '\n\t'+error.evidence.replace(/^\s+/,'') : '')+
					'\n'
				)
			
			# Fail?
			if foundError
				process.exit()
	
	# Check CSS files	
	checkCss: ->
		# Log
		console.log '\nChecking CSS files has not been implemented yet'
		
	# Check the files
	check: ->
		# Cycle
		for [type,checkType] in [
			['js',@checkJs],
			['css',@checkCss]
		]	
			if config.check[type] then checkType()
	

